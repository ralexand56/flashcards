{"version":3,"sources":["FlipCard/index.tsx","interfaces.ts","Reducer/index.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["ActionKeys","MainContainer","styled","animated","div","_templateObject","props","width","height","Side","_templateObject2","FlipCard","_ref","front","back","handleFlipping","_ref$isFlipped","isFlipped","_ref$width","_ref$height","_useSpring","useSpring","opacity","transform","concat","config","mass","tension","friction","react_default","a","createElement","onClick","style","interpolate","o","t","Reducer","state","arguments","length","undefined","cards","groups","actions","type","CARDS_LOAD","Object","objectSpread","CARD_FLIP","fndCard","find","x","id","toConsumableArray","filter","answerRevealed","main","App_templateObject","Header","header","App_templateObject2","Footer","footer","_templateObject3","ItemsGrid","section","_templateObject4","FrontView","_templateObject5","App","_useReducer","useReducer","name","_useReducer2","slicedToArray","dispatch","_useState","useState","_useState2","useEffect","title","imageLink","groupId","answer","pronunciation","audioAnswer","App_MainContainer","fontStyle","fontWeight","sort","b","localeCompare","map","src_FlipCard","key","backgroundImage","file","aud","Audio","src","load","play","error","console","dir","JSON","stringify","handlePlayAudio","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.50daf7df.chunk.js","sourcesContent":["import React, { SFC, ReactElement } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { animated, useSpring } from \"react-spring\";\r\n\r\ninterface Props {\r\n  isFlipped?: boolean;\r\n  handleFlipping?: () => void;\r\n  front: ReactElement;\r\n  back: ReactElement;\r\n  width?: number;\r\n  height?: number;\r\n}\r\n\r\ninterface SideProps {\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nconst MainContainer = styled(animated.div)`\r\n  border: 0px solid;\r\n  display: flex;\r\n  justify-content: center;\r\n  width: ${(props: SideProps) => props.width}px;\r\n  height: ${props => props.height}px;\r\n  overflow: hidden;\r\n`;\r\n\r\nconst Side = styled(animated.div)`\r\n  /* padding: 0.3em; */\r\n  cursor: pointer;\r\n  background-color: #31333f;\r\n  display: flex;\r\n  justify-content: center;\r\n  will-change: transform, opacity;\r\n  position: absolute;\r\n  max-width: ${(props: SideProps) => props.width}px;\r\n  max-height: ${props => props.height}px;\r\n  width: ${props => props.width}px;\r\n  height: ${props => props.height}px;\r\n  border-radius: 1em;\r\n  overflow: hidden;\r\n  box-shadow: 0px 10px 30px -5px rgba(0, 0, 0, 0.3);\r\n`;\r\n\r\nexport const FlipCard: SFC<Props> = ({\r\n  front,\r\n  back,\r\n  handleFlipping,\r\n  isFlipped = true,\r\n  width = 250,\r\n  height = 250\r\n}) => {\r\n  const { opacity, transform } = useSpring({\r\n    opacity: isFlipped ? 1 : 0,\r\n    transform: `perspective(600px) rotateX(${isFlipped ? 180 : 0}deg)`,\r\n    config: { mass: 5, tension: 500, friction: 80 }\r\n  });\r\n\r\n  return (\r\n    <MainContainer width={width} height={height} onClick={handleFlipping}>\r\n      <Side\r\n        width={width}\r\n        height={height}\r\n        style={{\r\n          opacity: opacity.interpolate(o =>\r\n            typeof o === \"number\" ? 1 - o : 1\r\n          ),\r\n          transform\r\n        }}\r\n      >\r\n        {front}\r\n      </Side>\r\n      <Side\r\n        width={width}\r\n        height={height}\r\n        style={{\r\n          opacity,\r\n          transform: transform.interpolate(t => `${t} rotateX(180deg)`)\r\n        }}\r\n      >\r\n        {back}\r\n      </Side>\r\n    </MainContainer>\r\n  );\r\n};\r\n\r\nexport default FlipCard;\r\n","export interface LanguageQuestion {\r\n  id: string;\r\n  title: string;\r\n  imageLink: string;\r\n  proposed?: string;\r\n  answer: string;\r\n  pronunciation?: string;\r\n  audioAnswer: string;\r\n  type: \"audio\" | \"text\";\r\n  groupId: string;\r\n  group?: Group;\r\n  answerRevealed: boolean;\r\n}\r\n\r\nexport interface Group {\r\n  id: string;\r\n  name: string;\r\n}\r\n\r\nexport interface AppState {\r\n  cards: LanguageQuestion[];\r\n  currentGroupId?: string;\r\n  groups: Group[];\r\n}\r\n\r\nexport enum ActionKeys {\r\n  CARDS_LOAD = \"[cards] Load\",\r\n  CARD_FLIP = \"[card] Flip\"\r\n}\r\n\r\nexport type Actions = LoadCardsAction | FlipCardAction;\r\n\r\ninterface LoadCardsAction {\r\n  type: ActionKeys.CARDS_LOAD;\r\n  cards: LanguageQuestion[];\r\n}\r\n\r\ninterface FlipCardAction {\r\n  type: ActionKeys.CARD_FLIP;\r\n  id: string;\r\n}\r\n","import { AppState, Actions, ActionKeys } from \"../interfaces\";\r\n\r\nexport const Reducer = (\r\n  state: AppState = { cards: [], groups: [] },\r\n  actions: Actions\r\n): AppState => {\r\n  switch (actions.type) {\r\n    case ActionKeys.CARDS_LOAD:\r\n      return { ...state, cards: actions.cards };\r\n\r\n    case ActionKeys.CARD_FLIP:\r\n      const fndCard = state.cards.find(x => x.id === actions.id);\r\n\r\n      return fndCard\r\n        ? {\r\n            ...state,\r\n            cards: [\r\n              ...state.cards.filter(x => x.id !== actions.id),\r\n              { ...fndCard, answerRevealed: !fndCard.answerRevealed }\r\n            ]\r\n          }\r\n        : state;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default Reducer;\r\n","import React, { useState, useReducer, useEffect } from \"react\";\nimport FlipCard from \"./FlipCard\";\nimport styled, { css } from \"styled-components\";\nimport Reducer from \"./Reducer\";\nimport { Actions, ActionKeys } from \"./interfaces\";\nimport { ActionSheetIOS } from \"react-native\";\nconst MainContainer = styled.main`\n  border: 0px solid red;\n  color: white;\n  display: grid;\n  grid-template-rows: auto 1fr auto;\n  grid-template-areas:\n    \"header\"\n    \"items\"\n    \"footer\";\n  height: 100vh;\n`;\n\nconst Header = styled.header`\n  grid-area: header;\n  padding: 0.8em;\n  text-transform: uppercase;\n  letter-spacing: 0.2em;\n  font-size: 1.2em;\n  box-shadow: 0 1px 30px -5px rgba(0, 0, 0, 0.3);\n`;\n\nconst Footer = styled.footer`\n  grid-area: footer;\n  padding: 0.8em;\n  height: 1em;\n  box-shadow: 1px 0px 30px -5px rgba(0, 0, 0, 0.3);\n`;\n\nconst ItemsGrid = styled.section`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  grid-gap: 0.5em;\n  grid-area: items;\n  justify-items: center;\n  overflow: auto;\n  padding: 1em;\n`;\n\nconst FrontView = styled.div`\n  background-size: cover;\n  content: '';\n  width: 100%;\n  height: 100%;\n`;\n\nconst App = () => {\n  const [state, dispatch] = useReducer(Reducer, {\n    cards: [],\n    groups: [{ id: \"1\", name: \"Russian Verbs\" }]\n  });\n\n  const { cards } = state;\n\n  const [isFlipped, setIsFlipped] = useState(false);\n  const handlePlayAudio = (file: string) => {\n    try {\n      const aud = new Audio();\n\n      aud.src = `./audio/${file}`;\n      aud.load();\n      aud.play();\n    } catch (error) {\n      console.dir(JSON.stringify(error));\n    }\n  };\n\n  useEffect(() => {\n    dispatch({\n      type: ActionKeys.CARDS_LOAD,\n      cards: [\n        {\n          id: \"1\",\n          title: \"\",\n          imageLink: \"https://media.giphy.com/media/stv1Dliu5TrMs/giphy.gif\",\n          type: \"text\",\n          groupId: \"1\",\n          answer: \"работа\",\n          pronunciation: \"rabota\",\n          audioAnswer: \"job.mp3\",\n          answerRevealed: false\n        },\n        {\n          id: \"2\",\n          title: \"\",\n          imageLink:\n            \"https://media.kaboom.org/app/assets/resources/000/002/279/original/cities4.jpg\",\n          type: \"text\",\n          groupId: \"1\",\n          answer: \"работа\",\n          pronunciation: \"rabota\",\n          audioAnswer: \"job.mp3\",\n          answerRevealed: false\n        }\n      ]\n    });\n  }, []);\n\n  // console.dir(state);\n\n  return (\n    <MainContainer>\n      <Header>\n        <span style={{ fontStyle: \"italic\" }}>Flash</span>\n        <span style={{ fontWeight: \"bold\" }}>Cards</span>\n      </Header>\n      <ItemsGrid>\n        {cards\n          .sort((a, b) => a.id.localeCompare(b.id))\n          .map(x => (\n            <FlipCard\n              key={x.id}\n              front={\n                <FrontView style={{ backgroundImage: `url(${x.imageLink})` }}>\n                  {/* <img width={200} src={x.imageLink} /> */}\n                </FrontView>\n              }\n              back={\n                <div>\n                  <div>{x.answer}</div>\n                  <div>{x.pronunciation}</div>\n                  <button onClick={() => handlePlayAudio(x.audioAnswer)}>\n                    Play\n                  </button>\n                </div>\n              }\n              isFlipped={x.answerRevealed}\n              handleFlipping={() =>\n                dispatch({ type: ActionKeys.CARD_FLIP, id: x.id })\n              }\n            />\n          ))}\n      </ItemsGrid>\n      <Footer />\n    </MainContainer>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}