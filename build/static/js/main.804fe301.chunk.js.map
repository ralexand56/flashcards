{"version":3,"sources":["components/FlipCard/index.tsx","interfaces.ts","Reducer/CardReducer.ts","Reducer/index.ts","components/BackQuestionView.tsx","components/FrontQuestionView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ActionKeys","MainContainer","styled","animated","div","_templateObject","props","width","height","Side","_templateObject2","FlipCard","_ref","front","back","handleFlipping","_ref$isFlipped","isFlipped","_ref$width","_ref$height","_useSpring","useSpring","opacity","transform","concat","config","mass","tension","friction","react_default","a","createElement","onClick","style","zIndex","interpolate","t","o","CardReducer","state","actions","type","CARD_FLIP","id","Object","objectSpread","answerRevealed","CARD_CHECK_ANSWER","answerIsCorrect","proposed","answer","CARD_UPDATE_PROPOSED","Reducer","arguments","length","undefined","cards","groups","CARDS_LOAD","map","c","cardReducer","BackQuestionView","q","index_es","size","color","icon","pronunciation","file","aud","Audio","src","load","play","error","console","dir","JSON","stringify","handlePlayAudio","audioAnswer","Main","main","FrontQuestionView_templateObject","AnswerContainer","section","FrontQuestionView_templateObject2","StyledInput","input","_templateObject3","StyledButton","button","_templateObject4","FrontQuestionView","handleProposedChanged","backgroundImage","imageLink","placeholder","onChange","evt","currentTarget","value","onKeyDown","keyCode","App_templateObject","Header","header","App_templateObject2","Footer","footer","App_templateObject3","ItemsGrid","App_templateObject4","App","_useReducer","useReducer","name","_useReducer2","slicedToArray","dispatch","_useState","useState","_useState2","useEffect","title","groupId","App_MainContainer","fontStyle","fontWeight","sort","b","localeCompare","x","components_FlipCard","key","FrontQuestionView_FrontQuestionView","val","BackQuestionView_BackQuestionView","Boolean","window","location","hostname","match","library","add","faCheck","faCheckCircle","faTimesCircle","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.804fe301.chunk.js","sourcesContent":["import React, { SFC, ReactElement } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { animated, useSpring } from \"react-spring\";\r\n\r\ninterface Props {\r\n  isFlipped?: boolean;\r\n  handleFlipping?: () => void;\r\n  front: ReactElement;\r\n  back: ReactElement;\r\n  width?: number;\r\n  height?: number;\r\n}\r\n\r\ninterface SideProps {\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nconst MainContainer = styled(animated.div)`\r\n  border: 0px solid;\r\n  display: flex;\r\n  justify-content: center;\r\n  width: ${(props: SideProps) => props.width}px;\r\n  height: ${props => props.height}px;\r\n  overflow: hidden;\r\n`;\r\n\r\nconst Side = styled(animated.div)`\r\n  /* padding: 0.3em; */\r\n  background-color: #31333f;\r\n  display: flex;\r\n  justify-content: center;\r\n  will-change: transform, opacity;\r\n  position: absolute;\r\n  max-width: ${(props: SideProps) => props.width}px;\r\n  max-height: ${props => props.height}px;\r\n  width: ${props => props.width}px;\r\n  height: ${props => props.height}px;\r\n  border-radius: 1em;\r\n  overflow: hidden;\r\n  box-shadow: 0px 10px 30px -5px rgba(0, 0, 0, 0.3);\r\n`;\r\n\r\nexport const FlipCard: SFC<Props> = ({\r\n  front,\r\n  back,\r\n  handleFlipping,\r\n  isFlipped = true,\r\n  width = 250,\r\n  height = 250\r\n}) => {\r\n  const { opacity, transform } = useSpring({\r\n    opacity: isFlipped ? 1 : 0,\r\n    transform: `perspective(600px) rotateX(${isFlipped ? 180 : 0}deg)`,\r\n    config: { mass: 5, tension: 500, friction: 80 }\r\n  });\r\n\r\n  return (\r\n    <MainContainer\r\n      width={width}\r\n      height={height}\r\n      onClick={handleFlipping && handleFlipping}\r\n    >\r\n      <Side\r\n        width={width}\r\n        height={height}\r\n        style={{\r\n          zIndex: isFlipped ? 1 : 0,\r\n          opacity,\r\n          transform: transform.interpolate(t => `${t} rotateX(180deg)`)\r\n        }}\r\n      >\r\n        {back}\r\n      </Side>\r\n      <Side\r\n        width={width}\r\n        height={height}\r\n        style={{\r\n          zIndex: isFlipped ? 0 : 1,\r\n          opacity: opacity.interpolate(o =>\r\n            typeof o === \"number\" ? 1 - o : 1\r\n          ),\r\n          transform\r\n        }}\r\n      >\r\n        {front}\r\n      </Side>\r\n    </MainContainer>\r\n  );\r\n};\r\n\r\nexport default FlipCard;\r\n","export interface LanguageQuestion {\r\n  id: string;\r\n  title: string;\r\n  imageLink: string;\r\n  proposed?: string;\r\n  answer: string;\r\n  pronunciation?: string;\r\n  audioAnswer: string;\r\n  type: \"audio\" | \"text\";\r\n  groupId: string;\r\n  group?: Group;\r\n  answerRevealed: boolean;\r\n  answerIsCorrect: boolean | null;\r\n}\r\n\r\nexport interface Group {\r\n  id: string;\r\n  name: string;\r\n}\r\n\r\nexport interface AppState {\r\n  cards: LanguageQuestion[];\r\n  currentGroupId?: string;\r\n  groups: Group[];\r\n}\r\n\r\nexport enum ActionKeys {\r\n  CARDS_LOAD = \"[cards] Load\",\r\n  CARD_FLIP = \"[card] Flip\",\r\n  CARD_CHECK_ANSWER = \"[card] Check answer\",\r\n  CARD_UPDATE_PROPOSED = \"[card] Update proposed answer\"\r\n}\r\n\r\nexport type Actions =\r\n  | LoadCardsAction\r\n  | FlipCardAction\r\n  | CheckAnswerAction\r\n  | UpdateProposedAnswerAction;\r\n\r\ninterface LoadCardsAction {\r\n  type: ActionKeys.CARDS_LOAD;\r\n  cards: LanguageQuestion[];\r\n}\r\n\r\ninterface FlipCardAction {\r\n  type: ActionKeys.CARD_FLIP;\r\n  id: string;\r\n}\r\n\r\ninterface CheckAnswerAction {\r\n  type: ActionKeys.CARD_CHECK_ANSWER;\r\n  id: string;\r\n}\r\n\r\ninterface UpdateProposedAnswerAction {\r\n  type: ActionKeys.CARD_UPDATE_PROPOSED;\r\n  proposed: string;\r\n  id: string;\r\n}\r\n","import { LanguageQuestion, Actions, ActionKeys } from \"../interfaces\";\r\n\r\nexport const CardReducer = (\r\n  state: LanguageQuestion,\r\n  actions: Actions\r\n): LanguageQuestion => {\r\n  switch (actions.type) {\r\n    case ActionKeys.CARD_FLIP:\r\n      return state.id === actions.id\r\n        ? { ...state, answerRevealed: !state.answerRevealed }\r\n        : state;\r\n\r\n    case ActionKeys.CARD_CHECK_ANSWER:\r\n      return state.id === actions.id\r\n        ? {\r\n            ...state,\r\n            answerIsCorrect: state.proposed === state.answer ? true : false\r\n          }\r\n        : state;\r\n\r\n    case ActionKeys.CARD_UPDATE_PROPOSED:\r\n      return state.id === actions.id\r\n        ? {\r\n            ...state,\r\n            proposed: actions.proposed\r\n          }\r\n        : state;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default CardReducer;\r\n","import { AppState, Actions, ActionKeys } from \"../interfaces\";\r\nimport cardReducer from \"./CardReducer\";\r\n\r\nexport const Reducer = (\r\n  state: AppState = { cards: [], groups: [] },\r\n  actions: Actions\r\n): AppState => {\r\n  switch (actions.type) {\r\n    case ActionKeys.CARDS_LOAD:\r\n      return { ...state, cards: actions.cards };\r\n\r\n    case ActionKeys.CARD_FLIP:\r\n      return { ...state, cards: state.cards.map(c => cardReducer(c, actions)) };\r\n\r\n    case ActionKeys.CARD_CHECK_ANSWER:\r\n      return { ...state, cards: state.cards.map(c => cardReducer(c, actions)) };\r\n\r\n    case ActionKeys.CARD_UPDATE_PROPOSED:\r\n      return { ...state, cards: state.cards.map(c => cardReducer(c, actions)) };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default Reducer;\r\n","import React, { SFC } from \"react\";\r\nimport { LanguageQuestion } from \"../interfaces\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\ninterface Props {\r\n  q: LanguageQuestion;\r\n  handleFlipping: () => void;\r\n}\r\n\r\nconst handlePlayAudio = (file: string) => {\r\n  try {\r\n    const aud = new Audio();\r\n\r\n    aud.src = `./audio/${file}`;\r\n    aud.load();\r\n    aud.play();\r\n  } catch (error) {\r\n    console.dir(JSON.stringify(error));\r\n  }\r\n};\r\n\r\nexport const BackQuestionView: SFC<Props> = ({ q, handleFlipping }) => {\r\n  return (\r\n    <div>\r\n      <FontAwesomeIcon\r\n        size=\"2x\"\r\n        color={q.answerIsCorrect ? \"green\" : \"red\"}\r\n        icon={q.answerIsCorrect ? \"check-circle\" : \"times-circle\"}\r\n      />\r\n      <div>{q.answer}</div>\r\n      <div>{q.pronunciation}</div>\r\n      <button onClick={() => handlePlayAudio(q.audioAnswer)}>Play</button>\r\n      <button onClick={() => handleFlipping()}>Flip</button>\r\n    </div>\r\n  );\r\n};\r\n","import React, { SFC } from \"react\";\r\nimport { LanguageQuestion } from \"../interfaces\";\r\nimport styled from \"styled-components\";\r\n\r\ninterface Props {\r\n  q: LanguageQuestion;\r\n  handleFlipping: () => void;\r\n  handleProposedChanged: (val: string) => void;\r\n}\r\n\r\nconst Main = styled.main`\r\n  display: flex;\r\n  background-size: cover;\r\n  width: 100%;\r\n  height: 100%;\r\n  align-items: center;\r\n  justify-content: center;\r\n  border: 0px solid;\r\n`;\r\n\r\nconst AnswerContainer = styled.section`\r\n  display: flex;\r\n  justify-content: space-around;\r\n`;\r\n\r\nconst StyledInput = styled.input`\r\n  font-size: 1.2em;\r\n  width: 9em;\r\n`;\r\n\r\nconst StyledButton = styled.button`\r\n  font-size: 1.2em;\r\n  padding: 0.3em;\r\n`;\r\n\r\nexport const FrontQuestionView: SFC<Props> = ({\r\n  q,\r\n  handleFlipping,\r\n  handleProposedChanged\r\n}) => {\r\n  return (\r\n    <Main style={{ backgroundImage: `url(${q.imageLink})` }}>\r\n      <AnswerContainer>\r\n        <StyledInput\r\n          placeholder=\"answer...\"\r\n          onChange={evt => handleProposedChanged(evt.currentTarget.value)}\r\n          onKeyDown={evt => {\r\n            evt.keyCode === 13 && handleFlipping();\r\n          }}\r\n        />\r\n        <StyledButton onClick={handleFlipping}>?</StyledButton>\r\n      </AnswerContainer>\r\n    </Main>\r\n  );\r\n};\r\n","import React, { useState, useReducer, useEffect } from \"react\";\nimport FlipCard from \"./components/FlipCard\";\nimport styled, { css } from \"styled-components\";\nimport Reducer from \"./Reducer\";\nimport { ActionKeys } from \"./interfaces\";\nimport { BackQuestionView } from \"./components/BackQuestionView\";\nimport { FrontQuestionView } from \"./components/FrontQuestionView\";\nconst MainContainer = styled.main`\n  border: 0px solid red;\n  color: white;\n  display: grid;\n  grid-template-rows: auto 1fr auto;\n  grid-template-areas:\n    \"header\"\n    \"items\"\n    \"footer\";\n  height: 100vh;\n`;\n\nconst Header = styled.header`\n  grid-area: header;\n  padding: 0.8em;\n  text-transform: uppercase;\n  letter-spacing: 0.2em;\n  font-size: 1.2em;\n  box-shadow: 0 1px 30px -5px rgba(0, 0, 0, 0.3);\n`;\n\nconst Footer = styled.footer`\n  grid-area: footer;\n  padding: 0.8em;\n  height: 1em;\n  box-shadow: 1px 0px 30px -5px rgba(0, 0, 0, 0.3);\n`;\n\nconst ItemsGrid = styled.section`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  grid-gap: 0.5em;\n  grid-area: items;\n  justify-items: center;\n  overflow: auto;\n  padding: 1.5em;\n`;\n\nconst App = () => {\n  const [state, dispatch] = useReducer(Reducer, {\n    cards: [],\n    groups: [{ id: \"1\", name: \"Russian Verbs\" }]\n  });\n\n  const { cards } = state;\n\n  const [isFlipped, setIsFlipped] = useState(false);\n\n  useEffect(() => {\n    dispatch({\n      type: ActionKeys.CARDS_LOAD,\n      cards: [\n        {\n          id: \"1\",\n          title: \"\",\n          imageLink: \"https://media.giphy.com/media/stv1Dliu5TrMs/giphy.gif\",\n          type: \"text\",\n          groupId: \"1\",\n          answer: \"работа\",\n          pronunciation: \"rabota\",\n          audioAnswer: \"job.mp3\",\n          answerRevealed: false,\n          answerIsCorrect: null\n        },\n        {\n          id: \"2\",\n          title: \"\",\n          imageLink:\n            \"https://media.kaboom.org/app/assets/resources/000/002/279/original/cities4.jpg\",\n          type: \"text\",\n          groupId: \"1\",\n          answer: \"работа\",\n          pronunciation: \"rabota\",\n          audioAnswer: \"job.mp3\",\n          answerRevealed: false,\n          answerIsCorrect: null\n        }\n      ]\n    });\n  }, []);\n\n  // console.dir(state);\n\n  return (\n    <MainContainer>\n      <Header>\n        <span style={{ fontStyle: \"italic\" }}>Flash</span>\n        <span style={{ fontWeight: \"bold\" }}>Cards</span>\n      </Header>\n      <ItemsGrid>\n        {cards\n          .sort((a, b) => a.id.localeCompare(b.id))\n          .map(x => (\n            <FlipCard\n              key={x.id}\n              front={\n                <FrontQuestionView\n                  q={x}\n                  handleFlipping={() => {\n                    dispatch({ type: ActionKeys.CARD_FLIP, id: x.id });\n                    dispatch({ type: ActionKeys.CARD_CHECK_ANSWER, id: x.id });\n                  }}\n                  handleProposedChanged={val =>\n                    dispatch({\n                      type: ActionKeys.CARD_UPDATE_PROPOSED,\n                      id: x.id,\n                      proposed: val\n                    })\n                  }\n                />\n              }\n              back={\n                <BackQuestionView\n                  q={x}\n                  handleFlipping={() =>\n                    dispatch({ type: ActionKeys.CARD_FLIP, id: x.id })\n                  }\n                />\n              }\n              isFlipped={x.answerRevealed}\n            />\n          ))}\n      </ItemsGrid>\n      <Footer />\n    </MainContainer>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport {\n  faCheck,\n  faCheckCircle,\n  faTimesCircle\n} from \"@fortawesome/free-solid-svg-icons\";\n\nlibrary.add(faCheck, faCheckCircle, faTimesCircle);\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}